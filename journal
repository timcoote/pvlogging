This is a journal of the work pinning down the problem, here: https://bit.ly/30sfAeg

- next step: check with f32 + current shiny (avoids guest additions). I think that this works, but seems flakey
- trying to get to safe working state. may need to go to prior to snapahot, if this does not work, as I don't know what to trust!

- move back to snapshot on master (notably version of install.R) try to source this. 
-- First go is with CRAN packages only. [fail]
-- Next is with 3 (None) [installs 18 packages, rather than 23, for CRAN] [fail, rlang]
-- Next is wiith 1 (ALL) [fail]

=> last checkout is NOT a working model!

trial with specific ggvis version, as letting R choose seems to break stuff!

edit install.R to install ggvis version early, as per 800055e9a3. Need to vagrant rsync to get this across. failed first time, retrying after explicit rsync (:-( ). Trying 3 (None), this time as istr that this is what avoids rlang - could be wrong.
At least ggvis appears to work with a 3 as it got past it in install.R

A question. Assuming that ggvis did get installed at a good version, what's the point in continuing with the other packages?
Is the ggvis installation with anythign other then "NONE" invalid?

NOT WORKING:
-try manual with just ggvis/None (fails with rlang on library(ggvis)), ggvis 2 (cran) (fails on library(ggvis) with rlang error), ggvis/empty line?(fail), ggvis/ All (fail), then:
 - go back to last good checkout and retry with that from vagrant up, rather than snapshot.

gone back to checkpoint 800055e9a3dd7fce581c30b49e73e78d7c909273 and vagrant destroy/up. The move with install.R (I think, although there could be gaps).

errors witth apparent issue with devtools, but it seems to be installed. manual install and start of rstudio-server, when used with browser this shows devtools installed (can just require it)
then install.packages("ggvis"): -fails no package shiny for it?, so use install_version (from install.R), need to dnf install R-Rcpp-devel..retry install_version [option 3: no updates]
this failed: ggvis loaded, but did not put dots on the screen!!! let's try with option 1 (all)
ditto when ggvis failed because of lack of shiny and explicit shiny install.

now with specific version of ggvis, as per earlier install.R
still getting rlang error,*but* if I restart R, ggvis works and doesn't coomplain.

let's try the restore snapshot: fails: was deleted with early `vagrant destroy`.

Trying the snapshot/restore + ggvis explicit version + R reset

snapshot b4 installing rstudio-server and R-Rcpp-devel, using 1 (all) on installations
works.
now to start from the snapshot beyond dnf and pull out some of the packages
- first attempt had blank line after `source ("/vagrant/iinstall.R"), so minimal upgrades, and again on second request - comes up with rlang error. need to verify impact of not just leaving blank line, but of updating some more packages

- narrowed down to dplyr (+ggvis) as the issue. Validating that shiny not necessary - shiny does not fix it alone. Then try current ggvis with older dplyr. nb the version of ggvis seems to be newer than the latest release tag on github (?)

interestingly, post restore snapshot from post dnf, no login on refresh on browser?

now I'm really unclear. `package.install ("ggvis"), plus version_install ("dplyr", version=0.8.3)` has no dots in the plot. but if I restart the R session, it works. Is there soemthing in how R loads libraries? It distinguishes between `attached packages` and `loaded via a namespace (and not attached)`????

If so, then I think that install.packages("ggvis") ought to fail even with R reset: 

=======
Bisection to identify where regression introduced into dplyr:

notes on trying to bisect dplyr

first commit on master that 0.8.5 is descended from: b7f4f4dfb4. 
check it out and install_local ("dplyr") after running rstudio (set DISPLAY=:1) in ~/tim. needs more ram: runs out!

Confirmed that HEAD fails and the first commit succeeds. If I'm going to bisect this, it may make sense to put the repo on the mac, rather than the vm home directory


git bisect log:
git bisect log
git bisect start
# bad: [90b3e4ea164514b57c72954c89dc63ab958eceb0] Bullet errors for summarise() (#4729)
git bisect bad 90b3e4ea164514b57c72954c89dc63ab958eceb0
# bad: [90b3e4ea164514b57c72954c89dc63ab958eceb0] Bullet errors for summarise() (#4729)
git bisect bad 90b3e4ea164514b57c72954c89dc63ab958eceb0
# good: [689518b4eb6adcfdeb5917dd97d41419b3e3d69b] Improve arrange docs
git bisect good 689518b4eb6adcfdeb5917dd97d41419b3e3d69b
# good: [3d45972610542138a790d8c1cd00a5990c0a1304] Upgrade tidyselect (#4720)
git bisect good 3d45972610542138a790d8c1cd00a5990c0a1304
# good: [cab26df184fa7032a16faa602fc529542b508be1] Remove unnused match_vars() function
git bisect good cab26df184fa7032a16faa602fc529542b508be1
# good: [dc8ebd4cb07c61a5e8fb9648a87fbf2f4628897a] Fix broken test (#4743)
git bisect good dc8ebd4cb07c61a5e8fb9648a87fbf2f4628897a
# good: [f7f66821327ce41f9a9a49bfc0f61434039f864f] Tweak error message
git bisect good f7f66821327ce41f9a9a49bfc0f61434039f864f
# bad: [887d40bf95cfe8c526245bd61fcde2c18af65e9d] Set tibble version (#4745)
git bisect bad 887d40bf95cfe8c526245bd61fcde2c18af65e9d
# bad: [125d75d6f76c78c27da45adc258f0b8b6a4620df] Simplify group metadata (#4728)
git bisect bad 125d75d6f76c78c27da45adc258f0b8b6a4620df
# first bad commit: [125d75d6f76c78c27da45adc258f0b8b6a4620df] Simplify group metadata (#4728)

accpted man and tests. tests still don't work. accepted c++. mtcars %> etc does plot. run into  some rate  limitinig on getting code from github


looks like the code that went from R/group_keys.R is what's causing the breakage. This/these have been moved to R/group_data.R and changed somewhat. It should be possible to accpet t
rest of the files, with possible amends ot NAMESPACE and it work ok.


just pulled the fiiles apart from group_keys as I think that's got the culprit iin it. May not have pulled them correclty as will not build in rstudio :-(

got a response on the Issue, and a fix. ddplyr::groups() has changed if no groups were found, it used to return a null. Now it returns a zero length list. The rendering(?) 
(in vega.R) checks for is.null. 
